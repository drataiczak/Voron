[gcode_macro _PROBE_VARS]
variable_travel_speed:         200
variable_travel_accel:         1000
variable_z_drop_speed:         20      # how fast the z will lower when moving to the z location to clear the probe
variable_home_current:         1.1
variable_safe_z:         	   25  # Minimum Z for attach/dock and homing functions

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:          0
variable_z_endstop_y:          0

# location to park the toolhead
variable_park_toolhead:        True    # Enable toolhead parking
variable_parkposition_x:       147.5
variable_parkposition_y:       150
variable_parkposition_z:       30    # -128 excludes Z - Park only on X-Y
variable_version:              1    # Helps users to update the necessary variables, do not update if the variables above are not updated

# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["beacon"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["beacon"]["y_offset"]|float %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=z_endstop_y VALUE={ z_endstop_y }

    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}

[gcode_macro _ENTRY_POINT]
gcode:
  {% set FUNCTION = 'pre_' ~ params.FUNCTION %}
  {% set MOVE_ACCEL = printer["gcode_macro _PROBE_VARS"].travel_accel %}

  M400
  SAVE_GCODE_STATE NAME={FUNCTION}
  G90
  SET_VELOCITY_LIMIT ACCEL={MOVE_ACCEL}
  
[gcode_macro _EXIT_POINT]
gcode:
  {% set FUNCTION = 'pre_' ~ params.FUNCTION %}
  {% set MOVE = params.MOVE | default(0) %}
  {% set SPEED = printer["gcode_macro _PROBE_VARS"].travel_speed %}

  M400
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

  RESTORE_GCODE_STATE NAME={FUNCTION} MOVE={MOVE} MOVE_SPEED={SPEED}

[gcode_macro _PARK_TOOLHEAD]
gcode:
  {% set PARK_TOOLHEAD = printer["gcode_macro _PROBE_VARS"].park_toolhead %}
  {% set PARK_X = printer["gcode_macro _PROBE_VARS"].parkposition_x %}
  {% set PARK_Y = printer["gcode_macro _PROBE_VARS"].parkposition_y %}
  {% set PARK_Z = printer["gcode_macro _PROBE_VARS"].parkposition_z %}
  {% set SPEED = printer["gcode_macro _PROBE_VARS"].travel_speed * 60 %}

  _ENTRY_POINT FUNCTION=park_toolhead

  {% if PARK_TOOLHEAD and 'xyz' in printer.toolhead.homed_axes %}
    { action_respond_info("Parking toolhead") }
  

    {% if PARK_Z == -128 %}
      G0 X{PARK_X} Y{PARK_Y} F{SPEED}
    {% else %}
      G0 X{PARK_X} Y{PARK_Y} Z{PARK_Z} F{SPEED}
    {% endif %}
  {% endif %}

  _EXIT_POINT FUNCTION=park_toolhead
  
[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32

    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    _PARK_TOOLHEAD

    RESTORE_GCODE_STATE NAME=STATE_G32
    
[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = printer["gcode_macro _PROBE_VARS"].home_current %}

    SAVE_GCODE_STATE NAME=_HOME_X
    
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    G28 X
    G91
    G1 X-10 F1200
    
    # Give StallGuard registers time to clear
    G4 P3000
    
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

    RESTORE_GCODE_STATE NAME=_HOME_X
    
[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = printer["gcode_macro _PROBE_VARS"].home_current %}

    SAVE_GCODE_STATE NAME=_HOME_Y
    
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    G28 Y
    G91
    G1 Y-10 F1200

    # Give StallGuard registers time to clear
    G4 P3000
    
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

    RESTORE_GCODE_STATE NAME=_HOME_Y
    
[gcode_macro _HOME_Z]
gcode:
    {% set z_endstop_x = printer["gcode_macro _PROBE_VARS"].z_endstop_x %}
    {% set z_endstop_y = printer["gcode_macro _PROBE_VARS"].z_endstop_y %}
    {% set safe_z = printer["gcode_macro _PROBE_VARS"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _PROBE_VARS"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _PROBE_VARS"].travel_speed * 60 %}

   SAVE_GCODE_STATE NAME=_HOME_Z

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home X and Y axes first!") }
    {% else %}
        {% if not 'z' in printer.toolhead.homed_axes %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # Move tool to safe homing position and home Z axis
        # location of z endstop
        G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
        G28 Z0
    {% endif %}

    RESTORE_GCODE_STATE NAME=_HOME_Z


[homing_override]
axes: xyz
gcode:
  _PROBE_VARS
  {% set KINEMATIC_Z = 0 %}

  {% set HOME_X, HOME_Y, HOME_Z = False, False, False %}

  # Start fans
  STEPPER_FAN_ON SPEED=0.25
  UPPER_EBAY_FAN_ON SPEED=0.25

  {% if not 'X' in params and not 'Y' in params and not 'Z' in params %}
    {% set HOME_X, HOME_Y, HOME_Z = True, True, True %}
  {% else %}
    {% if 'X' in params %}
      { action_respond_info("Need to home X axis")}
      {% set HOME_X = True %}
    {% endif %}

    {% if 'Y' in params %}
      { action_respond_info("Need to home Y axis")}
      {% set HOME_Y = True %}
    {% endif %}

    {% if 'Z' in params %}
      { action_respond_info("Need to home Z axis")}
      {% set HOME_Z = True %}
    {% endif %}
  {% endif %}

  _ENTRY_POINT FUNCTION=homing_override

  {% if HOME_Z == True %}
    {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes %}
      { action_respond_info("X or Y not homed, forcing full G28") }
       {% set HOME_X, HOME_Y, HOME_Z = True, True, True %}
    {% endif %}
  {% endif %}

  {% if HOME_X %}
    { action_respond_info("Homing X axis") }

    {% if printer["gcode_macro _HOME_X"] is defined %}
      _HOME_X
    {% else %}
      { action_raise_error("No _HOME_X macro defined! Homing will not continue") }
    {% endif %}
  {% endif %}

  {% if HOME_Y %}
    { action_respond_info("Homing Y axis") }

    {% if printer["gcode_macro _HOME_Y"] is defined %}
      _HOME_Y
    {% else %}
      { action_raise_error("No _HOME_Y macro defined! Homing will not continue") }
    {% endif %}
  {% endif %}

  {% if HOME_Z %}
    { action_respond_info("Homing Z axis") }

    {% if printer["gcode_macro _HOME_Z"] is defined %}
      _HOME_Z
    {% else %}
      { action_raise_error("No _HOME_Z macro defined! Homing will not continue") }
    {% endif %}
  {% endif %}

  _PARK_TOOLHEAD
  _EXIT_POINT function=homing_override