[respond]

[gcode_macro _PROBE_VARS]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_probe_z_homed:             False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:

[gcode_macro _KLICKY_DBG]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer["gcode_macro _PROBE_USER_VARS"].debug|default(False) %}

    {% if debug %}
        { action_respond_info(message) }
    {% endif %}

[gcode_macro _EXIT_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = printer["gcode_macro _PROBE_USER_VARS"].travel_speed %}

    # mandatory to save the new safe position
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}


[gcode_macro _ENTRY_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move_accel = printer["gcode_macro _PROBE_USER_VARS"].move_accel|default(1000) %}

    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}

    SET_GCODE_OFFSET Z=0
    G90
    SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _HOMING_VARS]
gcode:
    {% set reset  = params.RESET|default(0) %}
    {% if reset %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_lock VALUE={ False }
    {% endif %}

##########################
# Attach probe and lock it
[gcode_macro ATTACH_PROBE_LOCK]
description: Attaches Klicky Probe, can only be docked after unlocking
gcode:
    ATTACH_PROBE
    _PROBE_LOCK

########################
# Dock probe and lock it
[gcode_macro DOCK_PROBE_UNLOCK]
description: Docks Klicky Probe even if it was locked
gcode:
    _PROBE_UNLOCK
    DOCK_PROBE

##############
# Unlock Probe
[gcode_macro _PROBE_UNLOCK]
description: Unlocks Klicky Probe state
gcode:
    _KLICKY_DBG msg="_PROBE_LOCK setting probe_lock variable to False"
    SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_lock VALUE={ False }

############
# Lock Probe
[gcode_macro _PROBE_LOCK]
description: Locks Klicky Probe state
gcode:
    _KLICKY_DBG msg="_PROBE_LOCK setting probe_lock variable to True"
    SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_lock VALUE={ True }


######################
# Attach Probe Routine
[gcode_macro ATTACH_PROBE]
description: Attaches Klicky Probe
gcode:
    # See if the position should be restored after the attach
    {% set goback  = params.BACK|default(0) %}
    {% set probe_attached = printer["gcode_macro _PROBE_VARS"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARS"].probe_lock %}
    {% set verbose = printer["gcode_macro _PROBE_USER_VARS"].verbose %}
    {% set dockmove_x = printer["gcode_macro _PROBE_USER_VARS"].dockmove_x|default(0) %}
    {% set dockmove_y = printer["gcode_macro _PROBE_USER_VARS"].dockmove_y|default(0) %}
    {% set dockmove_z = printer["gcode_macro _PROBE_USER_VARS"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _PROBE_USER_VARS"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _PROBE_USER_VARS"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _PROBE_USER_VARS"].docklocation_z %}
    {% set attachmove_x = printer["gcode_macro _PROBE_USER_VARS"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _PROBE_USER_VARS"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _PROBE_USER_VARS"].attachmove_z|default(0) %}
    {% set attachmove2_x = printer["gcode_macro _PROBE_USER_VARS"].attachmove2_x|default(0) %}
    {% set attachmove2_y = printer["gcode_macro _PROBE_USER_VARS"].attachmove2_y|default(0) %}
    {% set attachmove2_z = printer["gcode_macro _PROBE_USER_VARS"].attachmove2_z|default(0) %}
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _PROBE_USER_VARS"].enable_z_hop %}
    {% set travel_feedrate = printer["gcode_macro _PROBE_USER_VARS"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _PROBE_USER_VARS"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _PROBE_USER_VARS"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _PROBE_USER_VARS"].z_drop_speed * 60 %}
    {% set bypass_probe_docking = printer["gcode_macro _PROBE_USER_VARS"].bypass_probe_docking|default(False) %}

    _ENTRY_POINT function=ATTACH_PROBE

    {% if bypass_probe_docking == False %}
        # If x and y are not homed
        {% if not 'xy' in printer.toolhead.homed_axes %}
            { action_raise_error("Must Home X and Y Axis First!") }
            _KLICKY_DBG msg="ATTACH_PROBE Axis homed"

        # If probe not attached and locked
        {% elif not probe_attached and not probe_lock %}
            _KLICKY_DBG msg="ATTACH_PROBE going to attach probe"
            {% if verbose %}
                { action_respond_info("Attaching Probe") }
            {% endif %}

            _KLICKY_STATUS_BUSY

            {% if not 'z' in printer.toolhead.homed_axes %}
                {% if verbose %}
                    { action_respond_info("Resetting Z position to zero") }
                {% endif %}

                _KLICKY_DBG msg="ATTACH_PROBE Z not homed, setting position as X=Y=Z=0"
                SET_KINEMATIC_POSITION Z=0

                {% if not enable_z_hop %} # Disables safe_z
                    _KLICKY_DBG msg="ATTACH_PROBE z_hop disabled"
                    {% set safe_z = 0 %}
                {% endif %}
            {% endif %}

            # Prior to saving actual position, check if its necessary to move to a safe Z
            # that has enought overhead for the attached probe
            {% if printer.gcode_move.gcode_position.z < safe_z %}
                _KLICKY_DBG msg="ATTACH_PROBE toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"
                {% if verbose %}
                    { action_respond_info("moving to a safe Z distance") }
                {% endif %}

                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            {% if not 'z' in printer.toolhead.homed_axes %} #duplicate??
                {% if verbose %}
                    { action_respond_info("Resetting Z position to zero, duplicate?") }
                {% endif %}
                _KLICKY_DBG msg="ATTACH_PROBE Z not homed, setting position as X=Y=Z=0"
                SET_KINEMATIC_POSITION Z=0
            {% endif %}

            {% if printer.gcode_move.gcode_position.z < safe_z %} #duplicate??
                _KLICKY_DBG msg="ATTACH_PROBE toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            _UMBILICAL_PATH

            _ENTRY_POINT function=ATTACH_PROBE_INTERN

            # Probe entry location
            _KLICKY_DBG msg="ATTACH_PROBE moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"
            G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
            {% if docklocation_z != -128 %}
                _KLICKY_DBG msg="ATTACH_PROBE moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"
                G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
                _KLICKY_DBG msg="ATTACH_PROBE moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
                G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
			{% endif %}
                              
            # Drop Probe to Probe location
            {% if docklocation_z != -128 %}
                _KLICKY_DBG msg="ATTACH_PROBE moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
                G0 Z{docklocation_z} F{dock_feedrate}
            {% endif %}

            _KLICKY_DBG msg="ATTACH_PROBE moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"
            G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}
            _KLICKY_DBG msg="ATTACH_PROBE moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
            G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
            
            {% if docklocation_z != -128 %}
                _KLICKY_DBG msg="ATTACH_PROBE moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"
                G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
            {% endif %}

            _KLICKY_DBG msg="ATTACH_PROBE moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"
            G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
         
            ## Go to Z safe distance
            {% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
              _KLICKY_DBG msg="ATTACH_PROBE moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"
              G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            _PARK_TOOLHEAD

            _CHECK_PROBE action=attach

            _EXIT_POINT function=ATTACH_PROBE_INTERN move={goback}
            _KLICKY_STATUS_READY

        {% elif probe_lock %}
            {% if verbose %}
                { action_respond_info("Probe locked!") }
            {% endif %}

            # Probe attached, do nothing
            _KLICKY_DBG msg="ATTACH_PROBE probe locked not attaching probe"
            _CHECK_PROBE action=query

        {% else %}
            {% if verbose %}
                { action_respond_info("Probe already attached!") }
            {% endif %}

            # Probe attached, do nothing
            _KLICKY_DBG msg="ATTACH_PROBE probe already attached, doing nothing"
            _CHECK_PROBE action=query

        {% endif %}

        _EXIT_POINT function=ATTACH_PROBE
    {% else %}
        _KLICKY_DBG msg="ATTACH_PROBE probe docking bypassed, doing nothing"
    {% endif %}


####################
# Dock Probe Routine
[gcode_macro DOCK_PROBE]
description: Docks Klicky Probe
gcode:
    # See if the position should be restored after the dock
    {% set goback  = params.BACK|default(0) %}
    {% set probe_attached = printer["gcode_macro _PROBE_VARS"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARS"].probe_lock %}
    {% set verbose = printer["gcode_macro _PROBE_USER_VARS"].verbose %}
    {% set dockmove_x = printer["gcode_macro _PROBE_USER_VARS"].dockmove_x|default(0) %}
    {% set dockmove_y = printer["gcode_macro _PROBE_USER_VARS"].dockmove_y|default(0) %}
    {% set dockmove_z = printer["gcode_macro _PROBE_USER_VARS"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _PROBE_USER_VARS"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _PROBE_USER_VARS"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _PROBE_USER_VARS"].docklocation_z %}
    {% set attachmove_x = printer["gcode_macro _PROBE_USER_VARS"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _PROBE_USER_VARS"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _PROBE_USER_VARS"].attachmove_z|default(0) %}
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _PROBE_USER_VARS"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _PROBE_USER_VARS"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _PROBE_USER_VARS"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _PROBE_USER_VARS"].z_drop_speed * 60 %}
    {% set bypass_probe_docking = printer["gcode_macro _PROBE_USER_VARS"].bypass_probe_docking|default(False) %}
    {% if bypass_probe_docking == True %}
        _KLICKY_DBG msg="ATTACH_PROBE probe docking bypassed, doing nothing"
    {% endif %}

    {% if bypass_probe_docking != True %}
        _ENTRY_POINT function=DOCK_PROBE

        # If probe not attached and not locked
        {% if probe_attached and not probe_lock %}
          _KLICKY_STATUS_BUSY

          {% if printer.gcode_move.gcode_position.z < safe_z %}
              _KLICKY_DBG msg="DOCK_PROBE toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"
              G0 Z{safe_z} F{z_drop_feedrate}
          {% endif %}

          _UMBILICAL_PATH

          # Probe entry location
          _KLICKY_DBG msg="DOCK_PROBE moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"
          G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}

          {% if docklocation_z != -128 %}
            _KLICKY_DBG msg="DOCK_PROBE moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
            G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
          {% endif %}

          # Drop Probe to Probe location
          _KLICKY_DBG msg="DOCK_PROBE moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"

          G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
          {% if docklocation_z != -128 %}
            _KLICKY_DBG msg="ATTACH_PROBE moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
            G0 Z{docklocation_z} F{dock_feedrate}
          {% endif %}

          # Probe decoupling
          {% if docklocation_z != -128 %}
            _KLICKY_DBG msg="DOCK_PROBE moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"
            G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
          {% endif %}

          _KLICKY_DBG msg="DOCK_PROBE moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"
          G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}

          #Do an extra move away
          _KLICKY_DBG msg="DOCK_PROBE moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"
          G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}

          ## Go to Z safe distance
          {% if (printer.gcode_move.gcode_position.z < safe_z) %}
            _KLICKY_DBG msg="DOCK_PROBE moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"
            G0 Z{safe_z} F{z_drop_feedrate}
          {% endif %}

          _PARK_TOOLHEAD

          G4 P1000
          _CHECK_PROBE action=dock
          _KLICKY_STATUS_READY
        {% elif probe_lock %}
            {% if verbose %}
                { action_respond_info("Probe locked") }
            {% endif %}

            # Probe docked, do nothing
            _KLICKY_DBG msg="DOCK_PROBE probe locked not docking probe"
            _CHECK_PROBE action=query
        {% else %}
            {% if verbose %}
                { action_respond_info("Probe already docked") }
            {% endif %}

            # Probe docked, do nothing
            _KLICKY_DBG msg="DOCK_PROBE probe already docked, doing nothing"
            _CHECK_PROBE action=query
        {% endif %}

        _EXIT_POINT function=DOCK_PROBE move={goback}
    {% else %}
        _KLICKY_DBG msg="DOCK_PROBE probe docking bypassed, doing nothing"
    {% endif %}


#################
# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
description:Calibrate the probes z_offset with klicky automount
gcode:
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _PROBE_USER_VARS"].z_drop_speed * 60 %}
    {% set max_x = printer["gcode_macro _PROBE_USER_VARS"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _PROBE_USER_VARS"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set bypass_probe_docking = printer["gcode_macro _PROBE_USER_VARS"].bypass_probe_docking|default(False) %}


    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _KLICKY_DBG msg="probe_calibrate Axis homed"
    _KLICKY_DBG msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"

    # Protect against PROBE CALIBRATE performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }
    {% endif %}

    {% if bypass_probe_docking == False %}
        _CHECK_PROBE action=query
        G90
        ATTACH_PROBE back=1
        _KLICKY_STATUS_CALIBRATING_Z

        _KLICKY_DBG msg="probe_calibrate calling klipper probe_calibrate"
        _PROBE_CALIBRATE {% for p in params
                %}{'%s=%s ' % (p, params[p])}{%
               endfor %}

        M118 Moving the toolhead 20 mm from the bed
        _KLICKY_DBG msg="probe_calibrate Moving Z up by 20mm"
        TESTZ Z=20
        M118 Remove manually the probe and continue calibration
        _KLICKY_STATUS_READY
    {% else %}
        _KLICKY_STATUS_CALIBRATING_Z
        _KLICKY_DBG msg="probe_calibrate calling klipper probe_calibrate"
        _PROBE_CALIBRATE {% for p in params
                %}{'%s=%s ' % (p, params[p])}{%
               endfor %}
        _KLICKY_STATUS_READY
    {% endif %}

################
# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _PROBE_USER_VARS"].z_drop_speed * 60 %}
    {% set max_x = printer["gcode_macro _PROBE_USER_VARS"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _PROBE_USER_VARS"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _KLICKY_DBG msg="probe_accuracy Axis homed"
    _KLICKY_DBG msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"

    _ENTRY_POINT function=PROBE_ACCURACY

    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }
    {% endif%}

    _CHECK_PROBE action=query
    ATTACH_PROBE back=1

    _KLICKY_DBG msg="probe_accuracy calling klipper probe accuracy"
    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE back=1

    _EXIT_POINT function=PROBE_ACCURACY move=1

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 1.1 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    G28 X
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 1.1 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    G28 Y
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    {% set z_endstop_x = printer["gcode_macro _PROBE_VARS"].z_endstop_x %}
    {% set z_endstop_y = printer["gcode_macro _PROBE_VARS"].z_endstop_y %}
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _PROBE_USER_VARS"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _PROBE_USER_VARS"].z_drop_speed * 60 %}
    {% set verbose = printer["gcode_macro _PROBE_USER_VARS"].verbose %}

    _ENTRY_POINT function=Home_Z

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% else %}
        _KLICKY_DBG msg="_HOME_Z XY Axis homed"
        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
             _KLICKY_DBG msg="_HOME_Z Z not homed, setting position as X=Y=Z=0"
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # Move tool to safe homing position and home Z axis
        # location of z endstop
        _KLICKY_DBG msg="_HOME_Z moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"
        G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
        _KLICKY_DBG msg="_HOME_Z Homing Z G28 Z"
        G28 Z0
        _KLICKY_DBG msg="_HOME_Z toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"
        G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}

    _EXIT_POINT function=Home_Z

#############################################
# Enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True

#################
# Homing Override
[homing_override]
axes: xyz
gcode:
    # collect user state variables
    _PROBE_USER_VARS
    {% set verbose = printer["gcode_macro _PROBE_USER_VARS"].verbose %}
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z|float %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _PROBE_USER_VARS"].enable_z_hop %}
    {% set kinematic_z = 0 %}
    {% set dock_on_zhome = printer["gcode_macro _PROBE_USER_VARS"].dock_on_zhome|default(True) %}
    {% set attachmove_x = printer["gcode_macro _PROBE_USER_VARS"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _PROBE_USER_VARS"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _PROBE_USER_VARS"].attachmove_z|default(0) %}
    {% set z_drop_feedrate = printer["gcode_macro _PROBE_USER_VARS"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _PROBE_USER_VARS"].travel_speed * 60 %}
    {% set home_backoff_x = printer["gcode_macro _PROBE_USER_VARS"].home_backoff_x|default(0) %}
    {% set home_backoff_y = printer["gcode_macro _PROBE_USER_VARS"].home_backoff_y|default(0) %}
    {% set override_homing = printer["gcode_macro _PROBE_USER_VARS"].override_homing|default('') %}

    _CHECK_PROBE action=query

    # reset parameters
    {% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}

    {% if 'PROBE_LOCK' in params%}
        {% if verbose %}
            { action_respond_info("PROBE_LOCK = True") }
        {% endif %}
        {% set leave_probe_attached = True %}
    {% endif %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set home_x, home_y, home_z = True, True, True %}
        _KLICKY_DBG msg="homing_override goint to home all axes"

    {% else %}
        {% if 'X' in params %}
            {% set home_x = True %}
             _KLICKY_DBG msg="homing_override goint to home X"

        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
            _KLICKY_DBG msg="homing_override goint to home Y"
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
            _KLICKY_DBG msg="homing_override goint to home Z"
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _HOMING_VARS reset=1
            _KLICKY_DBG msg="homing_override goint to home all axes"
         {% endif %}

    {% endif %}

    _ENTRY_POINT function=homing_override
    _KLICKY_STATUS_HOMING

    # if Z is not homed, do not move the bed if it goes down
    {% if 'z' not in printer.toolhead.homed_axes %}
         {% if enable_z_hop == False %} # Disables safe_z
            _KLICKY_DBG msg="homing_override z_hop disabled"
            #preserve safe_z to use as the SET KINEMATIC Z position, so that the toolhead does not move to pick up the probe
            {% set kinematic_z = safe_z %}
            {% set safe_z = safe_z %}
        {% endif %}
    {% endif %}

    #On the first G28 after motors losing power, moves the Z to safe_z distance, if z_hop is enabled
    {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
        {% if verbose %}
            { action_respond_info("No axis homed") }
        {% endif %}
        _KLICKY_DBG msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"
        SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
        M400
        _KLICKY_DBG msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"
        {% if verbose %}
            { action_respond_info("moving to a safe Z distance") }
        {% endif %}
        G0 Z{safe_z} F{z_drop_feedrate}
	{% if home_z != True %} 
          _KLICKY_DBG msg="homing_override clearing axis homed state if not already homing Z"
          M84
        {% endif %}
    {% endif %}

    {% if home_z %}
        {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
            {% if verbose %}
                { action_respond_info("X or Y not homed, forcing full G28") }
            {% endif %}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}

    # if the dock is oriented on the Y, first do Y endstop
    {% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
        # Home y
        {% if home_y %}
            {% if override_homing == 'Y' %}
              _KLICKY_DBG msg="homing_override Y homing first override, due to override_homing = Y"
            {% else %}
              _KLICKY_DBG msg="homing_override Y homing first override, due to attachmove_y = 0"
            {% endif %}
            {% if verbose %}
                { action_respond_info("Homing Y") }
            {% endif %}
            {% if 'z' in printer.toolhead.homed_axes %}
                _KLICKY_DBG msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"
                {% if verbose %}
                    { action_respond_info("moving to a safe Z distance") }
                {% endif %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
            {% if printer["gcode_macro _HOME_Y"] is defined %}
                _KLICKY_DBG msg="homing_override calling _HOME_Y external script to handle the Y homing"
                _HOME_Y
            {% else %}
                _KLICKY_DBG msg="homing_override Homing Y G28 Y0"
                G28 Y0
                # does it need to back away from the home position
                {% if home_backoff_y != 0 %}
                    {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                        _KLICKY_DBG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
                    {% else %}
                        _KLICKY_DBG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
                    {%endif %}
                {%endif %}
            {% endif %}
        {% endif %}
        {% set home_y = False %}
    {% endif %}

    # Home x
    {% if home_x %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        {% if 'z' in printer.toolhead.homed_axes %}
            _KLICKY_DBG msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}
        {% if printer["gcode_macro _HOME_X"] is defined %}
            _KLICKY_DBG msg="homing_override calling _HOME_X external script to handle the X homing"
            _HOME_X
        {% else %}
            _KLICKY_DBG msg="homing_override Homing X, G28 X0"
            G28 X0
            # does it need to back away from the home position
            {% if home_backoff_x != 0 %}
                {% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
                    _KLICKY_DBG msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"
                    G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}
                {% else %}
                    _KLICKY_DBG msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"
                    G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}
                {%endif %}
            {%endif %}
        {% endif %}
    {% endif %}

    # Home y
    {% if home_y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        {% if 'z' in printer.toolhead.homed_axes %}
            _KLICKY_DBG msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}
        {% if printer["gcode_macro _HOME_Y"] is defined %}
            _KLICKY_DBG msg="homing_override calling _HOME_Y external script to handle the Y homing"
            _HOME_Y
        {% else %}
          _KLICKY_DBG msg="homing_override Homing Y, G28 Y0"
            G28 Y0
            {% if home_backoff_y != 0 %}
                {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                    _KLICKY_DBG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
                {% else %}
                    _KLICKY_DBG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
                {%endif %}
            {%endif %}
        {% endif %}
    {% endif %}

    # Home z
    {% if home_z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}
        {% if 'z' in printer.toolhead.homed_axes %}
            _KLICKY_DBG msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        # if probe is configured as endstop, attach it, else check if the probe needs to be docked if attached
        {% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
            _KLICKY_DBG msg="homing_override probe configured as a virtual Z endstop attaching probe"
            ATTACH_PROBE
            # if PROBE_LOCK parameter is given, Attach Probe and lock until it´s unlocked
            {% if leave_probe_attached %}
                _PROBE_LOCK
            {% endif %}
        {% elif dock_on_zhome == True %}
            DOCK_PROBE
        {% endif %}

        _HOME_Z

        # if probe is configured as endstop, dock it
        {% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
            _KLICKY_DBG msg="homing_override probe no longer required, docking probe"
            DOCK_PROBE
        {% elif dock_on_zhome == False %}
            DOCK_PROBE
        {% endif %}
    {% endif %}
    _CHECK_PROBE action=query

    # park the toolhead
    _PARK_TOOLHEAD

    _EXIT_POINT function=homing_override
    _KLICKY_STATUS_READY

# Umbilical path setup
[gcode_macro _UMBILICAL_PATH]
gcode:
    {% set umbilical = printer["gcode_macro _PROBE_USER_VARS"].umbilical %}
    {% set umbilical_x = printer["gcode_macro _PROBE_USER_VARS"].umbilical_x %}
    {% set umbilical_y = printer["gcode_macro _PROBE_USER_VARS"].umbilical_y %}
    {% set safe_z = printer["gcode_macro _PROBE_USER_VARS"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _PROBE_USER_VARS"].travel_speed * 60 %}

    {% if umbilical %}
        # Used to give the umbilical a better path to follow and coil properly if dock is tight in space
        _ENTRY_POINT function=Umbilical_Path

        _KLICKY_DBG msg="_UMBILICAL_PATH moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"
        G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}

        _EXIT_POINT function=Umbilical_Path
    {% endif %}

# Check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CHECK_PROBE]
variable_probe_state: 0
gcode:
    Query_Probe
    _SET_PROBE_STATE action={ params.ACTION }

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SET_PROBE_STATE]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_attached VALUE={ False }
    {% else %}
        # If not triggered (false), probe attached
        SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If probe fails to attach/detach

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Park Toolhead Routine
[gcode_macro _PARK_TOOLHEAD]
gcode:
    {% set park_toolhead = printer["gcode_macro _PROBE_USER_VARS"].park_toolhead %}
    {% set parkposition_x = printer["gcode_macro _PROBE_USER_VARS"].parkposition_x %}
    {% set parkposition_y = printer["gcode_macro _PROBE_USER_VARS"].parkposition_y %}
    {% set parkposition_z = printer["gcode_macro _PROBE_USER_VARS"].parkposition_z %}
    {% set travel_feedrate = printer["gcode_macro _PROBE_USER_VARS"].travel_speed * 60 %}
    {% set verbose = printer["gcode_macro _PROBE_USER_VARS"].verbose %}

    _ENTRY_POINT function=Park_Toolhead

    {% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
        {% if verbose %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        {% if parkposition_z == -128 %}
            _KLICKY_DBG msg="_PARK_TOOLHEAD moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"
            G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}

        {% else %}

            _KLICKY_DBG msg="_PARK_TOOLHEAD moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"
            G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}

        {% endif %}

    {% endif %}
    _EXIT_POINT function=Park_Toolhead



#################
# Status LEDs
# This enables stealthburner-led status macros to be used in klicky macros if they exist.
# https://github.com/VoronDesign/Voron-Afterburner/blob/sb-beta/Klipper_Macros/stealthburner_leds.cfg
[gcode_macro _KLICKY_STATUS_READY]
gcode:
    {% if printer['gcode_macro STATUS_READY'] is defined %}
        _KLICKY_DBG msg="_KLICKY_STATUS_READY activating the LED STATUS_READY"
        STATUS_READY
    {% endif %}

[gcode_macro _KLICKY_STATUS_BUSY]
gcode:
    {% if printer['gcode_macro STATUS_BUSY'] is defined %}
        _KLICKY_DBG msg="_KLICKY_STATUS_BUSY activating the LED STATUS_BUSY"
        STATUS_BUSY
    {% endif %}

[gcode_macro _KLICKY_STATUS_LEVELING]
gcode:
    {% if printer['gcode_macro STATUS_LEVELING'] is defined %}
        _KLICKY_DBG msg="_KLICKY_STATUS_LEVELING activating the LED STATUS_LEVELING"
        STATUS_LEVELING
    {% endif %}

[gcode_macro _KLICKY_STATUS_HOMING]
gcode:
    {% if printer['gcode_macro STATUS_HOMING'] is defined %}
        _KLICKY_DBG msg="_KLICKY_STATUS_HOMING activating the LED STATUS_HOMING"
        STATUS_HOMING
    {% endif %}

[gcode_macro _KLICKY_STATUS_CLEANING]
gcode:
    {% if printer['gcode_macro STATUS_CLEANING'] is defined %}
        _KLICKY_DBG msg="_KLICKY_STATUS_CLEANING activating the LED STATUS_CLEANING"
        STATUS_CLEANING
    {% endif %}

[gcode_macro _CLICKY_STATUS_MESHING]
gcode:
    {% if printer['gcode_macro STATUS_MESHING'] is defined %}
        _KLICKY_DBG msg="_KLICKY_STATUS_MESHING activating the LED STATUS_MESHING"
        STATUS_MESHING
    {% endif %}

[gcode_macro _KLICKY_STATUS_CALIBRATING_Z]
gcode:
    {% if printer['gcode_macro STATUS_CALIBRATING_Z'] is defined %}
        _KLICKY_DBG msg="_KLICKY_STATUS_CALIBRATING_Z activating the LED STATUS_CALIBRATING_Z"
        STATUS_CALIBRATING_Z
    {% endif %}

# Quad Gantry Level
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    {% set V = printer["gcode_macro _PROBE_USER_VARS"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}

    _CHECK_PROBE action=query
	G90
    ATTACH_PROBE
    _KLICKY_STATUS_LEVELING

    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    DOCK_PROBE

    [gcode_macro G32]
    gcode:
        SAVE_GCODE_STATE NAME-STATE_G32

        G90
        G28
        QUAD_GANTRY_LEVEL V=True
        G28
        _PARK_TOOLHEAD

        RESTORE_GCODE_STATE NAME=STATE_G32